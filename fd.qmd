---
title: "Fundamental diagrams"
---

The aim of this chapter is to **plot fundamental diagrams** (speed ~ density) and compare them between JPS and GCS.

A fundamental diagram denotes to the linear relationship between average speed (or velocity) and density (or flow) of an agent, usually vehicles or pedestrians.

Density = N/Area

Speed(av) = sum(agent distance per frame)/N

N -> number of agents

Area -> an area in which agents are counted

Note 1: GCS has distance/speed per frame data. You can find out how it was acquired following this R script: https://github.com/GretaTimaite/pedestrian_simulation/blob/main/gcs_speed.R

Note 2: JPS does not have this information, so it will be done in this chapter.

## 1.1 Global (GCS)

This builds on the previous chapter on density, hence density part will be skipped. Instead, let's move to finding out average speed per second.

```{r, eval = F}
# average speed per frame
gcs_speed1 = gcs_sf_s |> 
  dplyr::group_by(sec) |> 
  dplyr::summarise(n = dplyr::n()) 
gcs_speed2 = gcs_sf_s |> 
  dplyr::mutate(dist = as.numeric(dist)) |> 
  dplyr::filter(dist != 0) |> # filter our starting points (ie the rows that have dist = 0)
  dplyr::group_by(sec) |> 
  dplyr::summarise(dist_sum = sum(dist)) |>  # summing up the total distance of agents in a group
  sf::st_drop_geometry() # drop geometry column
gcs_speed = dplyr::left_join(gcs_speed1, gcs_speed2) |> 
  dplyr::mutate(speed_av = dist_sum/n) # average speed (see formula at the start of the notebook)
gcs_speed_joined = dplyr::left_join(gcs_speed, gcs_d)

```

## Plotting

```{r, eval = F}
gcs_fd = ggplot2::ggplot(data = gcs_speed_joined,
                ggplot2::aes(x = density,
                            y = speed_av))+
  ggplot2::geom_point()
```

## 1.2 Divided (GCS)

To find out how density has been measured, see "Density" chapter.

```{r, eval = F}
# first create a list to store our new datasets 
gcs_fd_div = list()
for (i in 1:lengths(gcs_div_sf)){
  gcs_fd_div[[i]] = gcs_sf_s[gcs_div_sf[i,], op = sf::st_intersects] 
}
```

```{r, eval = F}
# a list with dataframes (denoting to different polygons) containing average speed of agents per frame
gcs_speed_div = list()
for (i in 1:lengths(gcs_div_sf)){
  gcs_speed_div[[i]] = gcs_fd_div[[i]] |> 
    dplyr::mutate(dist = as.numeric(dist)) |> # turn character into numeric
    dplyr::filter(dist != 0) |> # filter out agent starting points (eg distance = 0)
    dplyr::group_by(sec) |> 
    dplyr::summarise(n = dplyr::n(), # number of agents per frame
                     dist_sum = sum(dist), # total sum
                     speed_av = dist_sum / n) # average speed
}
```

```{r, eval = F}
# join dataframes in `gcs_speed_div` and `gcs_speed_div` lists accordingly (will help when plotting)
gcs_fd_joined = list()
for (i in 1:length(gcs_fd_div)){
  gcs_fd_joined[[i]] = dplyr::left_join(gcs_speed_div[[i]] |> sf::st_drop_geometry(),
                                    gcs_d_div[[i]] |> sf::st_drop_geometry())
}
```

### Plotting

```{r, eval = F}
gcs_div_plots = list()
for (i in 1:length(gcs_fd_joined)){
  gcs_div_plots[[i]] = ggplot2::ggplot(gcs_fd_joined[[i]]) +
    ggplot2::aes(x = density,
                 y = speed_av) +
    ggplot2::geom_point() 
  # print(plots_den)
}
gridExtra::grid.arrange(gcs_div_plots[[1]], gcs_div_plots[[2]], gcs_div_plots[[3]], gcs_div_plots[[4]], layout_matrix = rbind(c(1,2),c(3,4)))

```

## 1.3 Selected (GCS)

```{r, eval = F}
# first create a list to store our new datasets 
gcs_fd_sel = list()
for (i in 1:length(zones)){
  gcs_fd_sel[[i]] = gcs_sf_s[gcs_div_sf[i,], op = sf::st_intersects] 
}
```

```{r, eval = F}
# a list with dataframes (denoting to different polygons) containing average speed of agents per frame
gcs_speed_sel = list()
for (i in 1:lengths(zones)){
  jps_speed_sel[[i]] = gcs_fd_sel[[i]] |> 
    dplyr::mutate(dist = as.numeric(dist)) |> # turn character into numeric
    dplyr::filter(dist != 0) |> # filter out agent starting points (eg distance = 0)
    dplyr::group_by(sec) |> 
    dplyr::summarise(n = dplyr::n(), # number of agents per frame
                     dist_sum = sum(dist), # total sum
                     speed_av = dist_sum / n) # average speed
}
```

```{r, eval = F}
# join lists accordingly (will help when plotting)
gcs_fd_joined = list()
for (i in 1:length(zones)){
  gcs_fd_joined[[i]] = dplyr::left_join(gcs_speed_div[[i]] |> sf::st_drop_geometry(),
                                    gcs_d_div[[i]] |> sf::st_drop_geometry())
}
```

### Plotting

```{r, eval = F}
gcs_sel_plots = list()
for (i in 1:length(gcs_fd_joined)){
  gcs_sel_plots[[i]] = ggplot2::ggplot(gcs_fd_joined[[i]]) +
    ggplot2::aes(x = density,
                 y = speed_av) +
    ggplot2::geom_point() 
  # print(plots_den)
}

gridExtra::grid.arrange(gcs_sel_plots[[1]], gcs_sel_plots[[2]], layout_matrix = rbind(c(1,2)))

```

## 2.1 Global (JPS)

We don't have dist column in our `traj1` dataframe. Thus, we will need to derive it. We will measure speed per secon.

This builds on the previous chapter on density, hence density part will be skipped. Instead, let's move to finding out average speed per second.

```{r, eval = F}
# average speed per frame
jps_speed1 = jps_dist_df |> 
  dplyr::mutate(sec = FR / 8) |> 
  dplyr::group_by(sec) |> 
  dplyr::summarise(n = dplyr::n(),
                   FR = FR,
                   ID = ID) 
jps_speed2 = jps_dist_df |> 
  sf::st_drop_geometry() |> # drop geometry column
  dplyr::mutate(sec = FR / 8) |> 
  dplyr::mutate(dist = as.numeric(dist)) |> 
  dplyr::filter(dist != 0) |> # filter our starting points (ie the rows that have dist = 0)
  dplyr::group_by(sec) |> 
  dplyr::summarise(dist_sum = sum(dist),
                   FR = FR,
                   ID = ID)   # summing up the total distance of agents in a group
jps_speed = dplyr::left_join(jps_speed1, jps_speed2) |> 
  dplyr::mutate(speed_av = dist_sum/n) # average speed (see formula at the start of the notebook)

jps_d_group_sec = jps_d |> 
  dplyr::group_by(sec) |> 
  dplyr::summarise(n = dplyr::n(),
                   density = density)
jps_speed_joined = dplyr::left_join(jps_speed, jps_d_group_sec)

```

## Plotting

```{r, eval = F}
jps_fd = ggplot2::ggplot(data = jps_speed_joined,
                ggplot2::aes(x = density,
                            y = speed_av))+
  ggplot2::geom_point()
```

## Divided (JPS)

To find out how density has been measured, see "Density" chapter.

```{r, eval = F}
# first create a list to store our new datasets 

# turn df into an sf object
jps_dist_sf = jps_dist_df |> 
  sf::st_as_sf(coords = c("x_coord", "y_coord"))

jps_fd_div = list()
for (i in 1:lengths(gcs_div_sf)){
  jps_fd_div[[i]] = jps_dist_sf[gcs_div_sf[i,], op = sf::st_intersects] 
}

```

```{r, eval = F}
# a list with dataframes (denoting to different polygons) containing average speed of agents per frame
jps_speed_div = list()
for (i in 1:lengths(gcs_div_sf)){
  jps_speed_div[[i]] = jps_fd_div[[i]] |> 
    dplyr::mutate(sec = FR / 8) |> 
    dplyr::mutate(dist = as.numeric(dist)) |> # turn character into numeric
    dplyr::filter(dist != 0) |> # filter out agent starting points (eg distance = 0)
    dplyr::group_by(sec) |> 
    dplyr::summarise(n = dplyr::n(), # number of agents per frame
                     dist_sum = sum(dist), # total sum
                     speed_av = dist_sum / n) # average speed
}
```

```{r, eval = F}
# join dataframes in `gcs_speed_div` and `gcs_speed_div` lists accordingly (will help when plotting)
jps_fd_joined = list()
for (i in 1:length(jps_fd_div)){
  jps_fd_joined[[i]] = dplyr::left_join(jps_speed_div[[i]] |> sf::st_drop_geometry(),
                                    jps_d_div[[i]] |> sf::st_drop_geometry())
}
```

### Plotting

```{r, eval = F}
jps_div_plots = list()
for (i in 1:length(jps_fd_joined)){
  jps_div_plots[[i]] = ggplot2::ggplot(jps_fd_joined[[i]]) +
    ggplot2::aes(x = density,
                 y = speed_av) +
    ggplot2::geom_point() 
  # print(plots_den)
}
gridExtra::grid.arrange(jps_div_plots[[1]], jps_div_plots[[2]], jps_div_plots[[3]], jps_div_plots[[4]], layout_matrix = rbind(c(1,2),c(3,4)))

```

## Selected (JPS)

```{r, eval = F}
# first create a list to store our new datasets 
jps_fd_sel = list()
for (i in 1:length(zones)){
  jps_fd_sel[[i]] = jps_dist_sf[zones[i], op = sf::st_intersects] 
}
```

```{r, eval = F}
# a list with dataframes (denoting to different polygons) containing average speed of agents per frame
jps_speed_sel = list()
for (i in 1:length(zones)){
  jps_speed_sel[[i]] = jps_fd_sel[[i]] |> 
    dplyr::mutate(sec = FR / 8) |> 
    dplyr::mutate(dist = as.numeric(dist)) |> # turn character into numeric
    dplyr::filter(dist != 0) |> # filter out agent starting points (eg distance = 0)
    dplyr::group_by(sec) |> 
    dplyr::summarise(n = dplyr::n(), # number of agents per frame
                     dist_sum = sum(dist), # total sum
                     speed_av = dist_sum / n) # average speed
}
```

```{r, eval = F}
# join lists accordingly (will help when plotting)
jps_fd_joined = list()
for (i in 1:length(zones)){
  jps_fd_joined[[i]] = dplyr::left_join(jps_speed_sel[[i]] |> sf::st_drop_geometry(),
                                    jps_d_sel[[i]] |> sf::st_drop_geometry())
}
```

### Plotting

```{r, eval = F}
jps_sel_plots = list()
for (i in 1:length(jps_fd_joined)){
  jps_sel_plots[[i]] = ggplot2::ggplot(jps_fd_joined[[i]]) +
    ggplot2::aes(x = density,
                 y = speed_av) +
    ggplot2::geom_point() 
  # print(plots_den)
}

gridExtra::grid.arrange(jps_sel_plots[[1]], jps_sel_plots[[2]], layout_matrix = rbind(c(1,2)))

```

# Comparison

## Global

```{r, eval = F}
#fd_comp = gcs_fd +
  ggplot2::geom_point(data = jps_speed_joined,
                      color = "red")
```

![](figures/fd_comp.png)    
## Divided

```{r, eval = F}
fd_div_comp = list()
for (i in 1:length(gcs_fd_div)) {
  fd_div_comp[[i]] = gcs_div_plots[[i]] + 
  ggplot2::geom_point(data = jps_fd_joined[[i]],
                     color = "red")
}

gridExtra::grid.arrange(fd_div_comp[[1]], fd_div_comp[[2]], fd_div_comp[[3]], fd_div_comp[[4]], layout_matrix = rbind(c(1,2),c(3,4)))
```

![](figures/df_div_comp.png)

## Selected

```{r, eval = F}
gcs_fd_div_plots+
  ggplot2::geom_point(data = jps_fd_joined,
                      color = "red")


fd_sel_comp = list()
for (i in 1:length(gcs_fd_div_plots)) {
  fd_sel_comp[[i]] = gcs_fd_div_plots[[i]] + 
  ggplot2::geom_point(data = jps_fd_joined[[i]],
                     color = "red")
}

gridExtra::grid.arrange(fd_sel_comp[[1]], fd_sel_comp[[2]], layout_matrix = rbind(c(1,2),c(3,4)))
```

![](figures/fd_sel_comp.png)



