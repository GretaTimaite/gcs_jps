---
title: "Density"
---

Density measure is similar to flow, but instead of countin the number of agents passing through, for instance, gates, persons per area are measured. Thus, its function is:

Density = N / m2

N = number of agents

Steffen and Seyfried (2010) identify two issues with this density measure:

1. "in" and "out" of an agent has to be assigned arbitrarily (p. 1903)
2. density is dependent on time and placement of a measure area, which might result in "jumps for small area." (p. 1903)

To address these issues, authors suggest implementing Voronoi diagrams. This will be done in the "Voronoi" chapter of this report.

Before moving on, I assume that density plots will resemble flow plots as both of them rely on the number of agents passing through a given area/line, but in density measure the flow rate is divided by an area (m2) of a measured area. Theoretically, if an area is 1m2x1m2 then the flow and density plots would overlap.

## 1.1 Global (GCS)

```{r, eval = F}
# group by seconds and then measure density
gcs_d = gcs_sf |> 
  sf::st_drop_geometry() |> 
  dplyr::mutate(sec = as.numeric(frame)/25) |>  # 1 sec = 25 frames
  dplyr::group_by(sec) |> 
  dplyr::summarise(n = dplyr::n(),
                   frame = frame) |> 
  dplyr::mutate(
    density = n / gcs_area 
  )

gcs_d |> head()
```

### Plotting

```{r, eval = F}
gcs_density = ggplot2::ggplot(gcs_d)+
  ggplot2::aes(x = sec,
               y = density)+
  ggplot2::geom_line()

print(gcs_density)
```

Density plot looks exactly the same as flow plot.

```{r, eval = F}
ggplot2::ggplot(gcs_d)+
  ggplot2::aes(x = sec,
               y = density)+
  ggplot2::geom_line() +
  ggplot2::geom_line(data = gcs_d,
                     ggplot2::aes(x = sec,
                                  y = n),
                     col = "red")
```

## 1.2 Divided GCS density

```{r, eval = F}
# add area as a new column
gcs_den_div = list()
for (i in 1:length(gcs_joined_grouped)){
  gcs_den_div[[i]] = gcs_joined_grouped[[i]] |> dplyr::mutate(area = gcs_area_div[i])
}
```

```{r, eval = F}
# find density for each group in each list
gcs_d_div = list()
for (i in 1:length(gcs_area_div)){
  gcs_d_div[[i]] = gcs_den_div[[i]] |> dplyr::mutate(density = n / gcs_area_div[i])
}
```

### Plotting

```{r, eval = F}
gcs_den_plots = list()
for (i in 1:length(gcs_d_div)){
  gcs_den_plots[[i]] = ggplot2::ggplot(gcs_d_div[[i]]) +
    ggplot2::aes(x = sec,
                 y = density) +
    ggplot2::geom_line() 
}

# let's plot a polygons 1-4 and 5-8
gridExtra::grid.arrange(gcs_den_plots[[1]], gcs_den_plots[[2]], gcs_den_plots[[3]], gcs_den_plots[[4]], layout_matrix = rbind(c(1,2),c(3,4)))
```

## 1.3 Selected (GCS)

```{r, eval = F}
# add area as a new column
gcs_den_sel = list()
for (i in 1:length(gcs_joined_zones)){
  gcs_den_sel[[i]] = gcs_joined_grouped_zones[[i]] |> dplyr::mutate(area = gcs_area_sel[i])
}
```

```{r, eval = F}
# find density for each group in each list
gcs_d_sel = list()
for (i in 1:length(gcs_joined_zones)){
  gcs_d_sel[[i]] = gcs_den_sel[[i]] |> dplyr::mutate(density = n / gcs_area_sel[i])
}
```

### Plotting

```{r, eval = F}
gcs_den_sel_plots = list()
for (i in 1:length(gcs_d_sel)){
  gcs_den_sel_plots[[i]] = ggplot2::ggplot(gcs_d_sel[[i]]) +
    ggplot2::aes(x = sec,
                 y = density) +
    ggplot2::geom_line() 
}

# let's plot a polygons 1-4 and 5-8
gridExtra::grid.arrange(gcs_den_sel_plots[[1]], gcs_den_sel_plots[[2]], layout_matrix = rbind(c(1,2)))
```

## 2.1 Global (JPS)

```{r, eval = F}
# group by seconds and then measure density
jps_d = traj1_sf |> 
  sf::st_drop_geometry() |> 
  dplyr::mutate(sec = FR/8) |>  # 1 sec = 8 frames
  dplyr::group_by(sec) |> 
  dplyr::summarise(n = dplyr::n(),
                   sec = sec) |> 
  dplyr::mutate(
    density = n / gcs_area
  )

gcs_d |> head()
```
### Plotting

```{r, eval = F}
jps_density = ggplot2::ggplot(jps_d)+
  ggplot2::aes(x = sec,
               y = density)+
  ggplot2::geom_line()

print(jps_density)
```

## 2.2 Divided (JPS)

```{r, eval = F}
# add area as a new column
jps_den_div = list()
for (i in 1:length(jps_joined_grouped)){
  jps_den_div[[i]] = jps_joined_grouped[[i]] |> dplyr::mutate(area = gcs_area_div[i])
}
```

```{r, eval = F}
# find density for each group in each list
jps_d_div = list()
for (i in 1:length(gcs_area_div)){
  jps_d_div[[i]] = jps_den_div[[i]] |> dplyr::mutate(density = n / gcs_area_div[i])
}
```

### Plotting

```{r, eval = F}
jps_den_div_plots = list()
for (i in 1:length(jps_d_div)){
  jps_den_div_plots[[i]] = ggplot2::ggplot(jps_d_div[[i]]) +
    ggplot2::aes(x = sec,
                 y = density) +
    ggplot2::geom_line() 
}

# let's plot a polygons 1-4 
gridExtra::grid.arrange(jps_den_div_plots[[1]], jps_den_div_plots[[2]], jps_den_div_plots[[3]], jps_den_div_plots[[4]], layout_matrix = rbind(c(1,2),c(3,4)))
```

## 2.3 Selected (JPS)

```{r, eval = F}
# add area as a new column
jps_den_sel = list()
for (i in 1:length(jps_joined_zones)){
  jps_den_sel[[i]] = jps_joined_grouped_zones[[i]] |> dplyr::mutate(area = gcs_area_sel[i])
}
```

```{r, eval = F}
# find density for each group in each list
jps_d_sel = list()
for (i in 1:length(jps_joined_zones)){
  jps_d_sel[[i]] = jps_den_sel[[i]] |> dplyr::mutate(density = n / gcs_area_sel[i])
}
```

### Plotting

```{r, eval = F}
jps_den_sel_plots = list()
for (i in 1:length(jps_d_sel)){
  jps_den_sel_plots[[i]] = ggplot2::ggplot(jps_d_sel[[i]]) +
    ggplot2::aes(x = sec,
                 y = density) +
    ggplot2::geom_line() 
}

# let's plot a polygons 1-4 
gridExtra::grid.arrange(jps_den_sel_plots[[1]], jps_den_sel_plots[[2]], layout_matrix = rbind(c(1,2)))
```

## Comparison

### Global

```{r, eval = F}
density_comp = gcs_density + 
  # ggplot2::ggplot(jps_grouped) +
  ggplot2::geom_line(data = jps_d,
                     color = "red")
```

![](figures/density_comp.png)
```{r, eval = F}
print("GCS mean density value")
gcs_d |> dplyr::group_by(sec) |> dplyr::pull(density) |> mean()
print("JPS mean density value")
jps_d |> dplyr::group_by(sec) |> dplyr::pull(density) |> mean()

print("GCS median density value")
gcs_d |> dplyr::group_by(sec) |> dplyr::pull(density) |> median()
print("JPS median density value")
jps_d |> dplyr::group_by(sec) |> dplyr::pull(density) |> median()

```

[1] "GCS mean density value"
[1] 0.02354127
[1] "JPS mean density value"
[1] 0.04464389
[1] "GCS median density value"
[1] 0.02566038
[1] "JPS median density value"
[1] 0.04566038


### Divided

```{r, eval = F}
density_div_comp = list()
for (i in 1:length(gcs_den_div_plots)) {
  density_div_comp[[i]] = gcs_den_div_plots[[i]] + 
  ggplot2::geom_line(data = jps_d_div[[i]],
                     color = "red")
}

gridExtra::grid.arrange(density_div_comp[[1]], density_div_comp[[2]], density_div_comp[[3]], density_div_comp[[4]], layout_matrix = rbind(c(1,2),c(3,4)))
```

![](figures/density_div_comp_plot.png)

## Selected

```{r, eval = F}
flow_sel_comp = list()
for (i in 1:length(gcs_flow_zones_plots)) {
  flow_sel_comp[[i]] = gcs_flow_zones_plots[[i]] + 
  ggplot2::geom_line(data = jps_joined_grouped_zones[[i]],
                     color = "red")
}

gridExtra::grid.arrange(flow_sel_comp[[1]], flow_sel_comp[[2]], layout_matrix = rbind(c(1,2)))

```

![](figures/density_sel_comp_plot.png)

ÃŸ



